---
title: "Group 1 Parkinsons Data Set"
format: html
editor: visual
---

## Group 1

Tara Dehdari, Patricio Martinez, Duy Nguyen

## Problem Statement:

##Draft problem statement being solved by the code

#### Load Libraries

```{r}
library(caret)
library(randomForest)
library(tidyverse)
library(ggplot2)
library(earth)
library(kernlab)
library(dplyr)
library(corrplot)
theme_set(theme_minimal())

#Set seed to reproduce samples
seed <- 123
```

#### Load Data

```{r}
df <- read.csv("parkinsons_updrs.data.csv")
head(df)

#motor_UPDRS <-df$motor_UPDRS
#total_UPDRS <-df$total_UPDRS
#Create dataframe of predictors, removing the index and dependent variables
#df_x <- df[c(2:5,8:23)]

#head(df_x)
```

## Exploratory Data Analysis:

#### Data Types

```{r}
str(df)
```
```{r}
summary(df)
```
#### Missing Values

```{r}
sum(is.na(df))
```

#### Visualizations

```{r}
# Age distribution
ggplot(df, aes(x = age)) +
  geom_histogram(binwidth = 5, fill = "blue", color = "black") +
  theme_minimal() +
  labs(title = "Age Distribution of Patients", x = "Age", y = "Count")

# Total UPDRS distribution
ggplot(df, aes(x = total_UPDRS)) +
  geom_histogram(binwidth = 5, fill = "green", color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Total UPDRS Scores", x = "Total UPDRS", y = "Count")

# Age vs. Total UPDRS
ggplot(df, aes(x = age, y = total_UPDRS)) +
  geom_point(alpha = 0.5) +
  theme_minimal() +
  labs(title = "Age vs. Total UPDRS", x = "Age", y = "Total UPDRS")
```
```{r}
# Count the number of males and females
sex_count <- df %>% 
  group_by(sex) %>%
  summarise(count = n())

# Convert 'sex' to factor for better labeling
sex_count$sex <- factor(sex_count$sex, labels = c("Female", "Male"))

# Create a bar plot for the distribution of males and females
ggplot(sex_count, aes(x = sex, y = count, fill = sex)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Distribution of Males and Females", x = "Sex", y = "Count") +
  scale_fill_manual(values = c("Female" = "pink", "Male" = "blue"))
```
## Preprocessing

#### Normalize the Dataset

```{r}
# gather numeric columns
numeric_cols <- sapply(df, is.numeric)

# normalizing the numerical features
df[numeric_cols] <- lapply(df[numeric_cols], scale)
```

#### Resampling Female and Male

```{r}
# determine the minimum count
min_count <- min(sex_count$count)

# downsample the majority class 
df_downsample <- df %>%
  group_by(sex) %>%
  sample_n(min_count)

# Visualizing new amount of male and female

# Count the number of males and females after downsampling
sex_count_downsampled <- df_downsample %>%
  group_by(sex) %>%
  summarise(count = n())

# Convert 'sex' to factor for better labeling
sex_count_downsampled$sex <- factor(sex_count_downsampled$sex, labels = c("Female", "Male"))

# Create a bar plot for the distribution of males and females after downsampling
ggplot(sex_count_downsampled, aes(x = sex, y = count, fill = sex)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Distribution of Males and Females after Downsampling", x = "Sex", y = "Count") +
  scale_fill_manual(values = c("Female" = "pink", "Male" = "blue"))
```

#### Heatmap Correlation

```{r}
correlations <- cor(df)

corrplot(correlations, order = "hclust")

print(correlations)
```
##### Removing High Correlations

```{r}

# find highly correlated predictors
highCorr <- findCorrelation(correlations, cutoff = 0.80)
cat("The amount of high correlations:", length(highCorr), "\n")
cat("\n")
cat ("Values with high correlations: \n")
cat(highCorr)

```
```{r}
# removing high correlations
filtered_df <- df[,-highCorr]

# correlation heatmap again 
correlationsFiltered <- cor(filtered_df)
corrplot(correlationsFiltered, order = "hclust")
```

## Data Splitting:













## Data pre-processing:

```{r}

#Evaluate data for NAs
df_x_na <- apply(df_x, 2, function(x) {sum(is.na(x))})

# Function to plot the distribution of a numeric variable
plot_numeric_distribution <- function(df_x, var_name) {
  ggplot(df_x, aes_string(var_name)) +
    geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
    ggtitle(paste("Distribution of", var_name)) +
    xlab(var_name) +
    ylab("Frequency")
}

# Function to plot the distribution of a factor variable
plot_factor_distribution <- function(df_x, var_name) {
  ggplot(df_x, aes_string(var_name)) +
    geom_bar(fill = "blue", color = "black") +
    ggtitle(paste("Distribution of", var_name)) +
    xlab(var_name) +
    ylab("Count")
}

# Loop through each column in the data frame and plot the distribution
for (var_name in names(df_x)) {
  if (is.numeric(df_x[[var_name]])) {
    print(plot_numeric_distribution(df_x, var_name))
  } else if (is.factor(df_x[[var_name]])) {
    print(plot_factor_distribution(df_x, var_name))
  }
}
```

```{r}
```



## Model Building Strategy:

## Model Performance and Hyper Parameter Turning:

## Results and final selection
